"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1240],{35318:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>m});var r=n(27378);function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){s(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,s=function(t,e){if(null==t)return{};var n,r,s={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(s[n]=t[n]);return s}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(s[n]=t[n])}return s}var c=r.createContext({}),p=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},l=function(t){var e=p(t.components);return r.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,s=t.mdxType,o=t.originalType,c=t.parentName,l=i(t,["components","mdxType","originalType","parentName"]),d=p(n),m=s,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,a(a({ref:e},l),{},{components:n})):r.createElement(g,a({ref:e},l))}));function m(t,e){var n=arguments,s=e&&e.mdxType;if("string"==typeof t||s){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i.mdxType="string"==typeof t?t:s,a[1]=i;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87256:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>v,contentTitle:()=>m,default:()=>y,frontMatter:()=>d,metadata:()=>g,toc:()=>f});var r=n(35318),s=Object.defineProperty,o=Object.defineProperties,a=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,l=(t,e,n)=>e in t?s(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,u=(t,e)=>{for(var n in e||(e={}))c.call(e,n)&&l(t,n,e[n]);if(i)for(var n of i(e))p.call(e,n)&&l(t,n,e[n]);return t};const d={},m=void 0,g={unversionedId:"coding/init-server",id:"coding/init-server",title:"init-server",description:"- #server #init #ubuntu",source:"@site/my-documents/docs/coding/init-server.md",sourceDirName:"coding",slug:"/coding/init-server",permalink:"/docs/coding/init-server",draft:!1,editUrl:"https://github.com/markshawn2020/docusaurus/edit/master/my-documents/docs/coding/init-server.md",tags:[],version:"current",lastUpdatedAt:1708952546,formattedLastUpdatedAt:"2024\u5e742\u670826\u65e5",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"rockchip4 vr manual",permalink:"/docs/coding/hardware/rockchip/rockchip4-vr-manual"},next:{title:"moments",permalink:"/docs/coding/moments"}},v={},f=[],h={toc:f};function y(t){var e,n=t,{components:s}=n,l=((t,e)=>{var n={};for(var r in t)c.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&i)for(var r of i(t))e.indexOf(r)<0&&p.call(t,r)&&(n[r]=t[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(e=u(u({},h),l),o(e,a({components:s,mdxType:"MDXLayout"}))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"#server #init #ubuntu"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",u({parentName:"pre"},{className:"language-shell"}),'##------------\n## mac local config (ensure remote ok)\n##------------\n# ref: https://askubuntu.com/a/1347849/1629991\n\n\n##------------\n## init server\n##------------\n\nsudo apt update\nsudo apt upgrade -y\n\nsudo apt install zsh\n# install oh-my-zsh\nsh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n\nsudo apt install tmux\n# install oh-my-tmux\ngit clone https://github.com/gpakosz/.tmux.git\nln -s -f .tmux/.tmux.conf\ncp .tmux/.tmux.conf.local .\n\n\n# install nvm/node/npm, ref: https://github.com/nvm-sh/nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash\nexport NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"\n[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh" # This loads nvm\n\nnvm install 18\nnvm use 18\n\nnpm install -g yarn\n\n# ssh/rsync no-secret login (from local to server)\nusername="xxx"\nserver="xxxxx"\nfile="~/.ssh/id_rsa.pub"\ncat $file | ssh $username@$server "cat - >> ~/.ssh/authorized_keys"\n\n# config git in server (server to github)\nrsync -ravP ~/.ssh/id_ed25519* ubuntu@54.254.215.39:~/.ssh/\n# test\nssh -vT git@github.com\n\n##------------\n## mongodb\n##------------\n\n# install mongodb / postgresql\n# from official at https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/\nsudo apt-get install gnupg curl\ncurl -fsSL https://pgp.mongodb.com/server-7.0.asc | \\\n sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \\\n --dearmor\nsudo apt-get update\n\n# if error, resolve the invalid signature problem from official,  https://chrisjean.com/fix-apt-get-update-the-following-signatures-couldnt-be-verified-because-the-public-key-is-not-available/\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 160D26BB1785BA38 # replace the code from update error\n\nsudo systemctl start mongod\nsudo systemctl enable mongod\nsudo systemctl status mongod\n# \u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u7aef\u53e3\u5565\u7684\u4e0d\u9700\u8981\uff0c\u76f4\u63a5localhost:27017\u5373\u53ef\uff0c\u901a\u8fc7\u6211\u4eec\u7684ssh\u767b\u5f55\uff08\u5305\u62ec\u5728 mongodb compass\uff09\n\n##------------\n## postgresql\n##------------\nsudo apt update\nsudo apt install postgresql postgresql-contrib\n\nsudo systemctl start postgresql \nsudo systemctl status postgresql\n# change password for our database connection, ref: https://stackoverflow.com/a/57997449/9422455\n# there is no need to change user, since the `postgres` is default\nsudo -u postgres psql -c "ALTER ROLE postgres WITH PASSWORD \'postgres\';"\n\n### install pg-vector, ref: https://github.com/pgvector/pgvector#apt\npsql --version # check postgresql version\n## ubuntu\nsudo apt install -y postgresql-common\nsudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh\n\n## ubuntu\nsudo apt install postgresql-14-pgvector # support 14/15\n## mac\nbrew install pgvector # only supports 14\n\n### init server\ncd scripts && yarn && -\n# \u9700\u8981\u5148\u88c5\u597d pgvector-14\nnpx prisma migrate dev && npm prisma db push\nnpx tsx scripts/init-flowgpt-data.ts\nnpx tsx scripts/init-pg-vector.ts\n\n\n##------------\n## nginx\n##------------\n# 1. \u53c2\u8003\u8fd9\u7bc7\u914d\u7f6e\u57fa\u672c\u7684nginx ssl\uff1a https://gist.github.com/jjsquady/5399d6e1b23f501083a9c262d806e248\n# 2. \u53c2\u8003\u8fd9\u4e2a\u914d\u7f6e \u5b50\u57df\u540d ssl\uff1ahttps://community.letsencrypt.org/t/you-may-need-to-use-a-different-authenticator-plugin/115026/4\nsudo certbot certonly --manual --preferred-challenges=dns --email cto@cs-magic.com --server https://acme-v02.api.letsencrypt.org/directory -d poketto.ai -d \'*.poketto.ai\'\n# 3. \u5e76\u540c\u6b65\u914d\u7f6e\u57df\u540d\u5185\u7684 DNS \u8bb0\u5f55\uff1a https://dcc.godaddy.com/control/portfolio/poketto.ai/settings?tab=dns&itc=mya_vh_buildwebsite_domain\n# 4. \u5982\u679c\u8981\u914d\u7f6e\u591a\u4e2a\u57df\u540d\u7684\u8bdd\uff0c\u8981\u628a default-server \u53bb\u6389\nsudo systemctl start nginx\n\n\n##------------\n## source code (poketto #js)\n##------------\nmkdir @cs-magic && cd @cs-magic \nmkdir coding && cd coding\ngit clone git@github.com:cs-magic/poketto.git\nyarn\nnpx prisma migrate dev\n\n# test dev\nyarn dev\n# visit 54.254.215.39:3000 to see if website ok\n\n# run prod\nyarn update\n\n\n##------------\n## source code (scrapy-flowgpt, #py)\n##------------\n# install py 3.11 (since we used, while default is 3.10), https://iohk.zendesk.com/hc/en-us/articles/16724475448473-Install-Python-3-11-on-ubuntu\nsudo apt update && sudo apt upgrade\nsudo apt install wget build-essential libncursesw5-dev libssl-dev \\  \nlibsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt install python3.11\n\n# ref: https://python-poetry.org/docs/\ncurl -sSL https://install.python-poetry.org | python3 -\necho \'export PATH="/home/ubuntu/.local/bin:$PATH"\' >> ~/.zshrc\npoetry install\npoetry shell\n\n\n# ------------------\n# pm2 serve\n# ------------------\nscript=\'\ncd ~/@cs-magic/coding/poketto\npm2 start --name "poketto" "yarn start -p 30817"\npm2 start "npx tsx scripts/reset-quota-daily.ts" --name "reset-quota-daily" -c "20 3 * * *" --no-autorestart\n\'\nnpm i -g pm2\neval $script\n# startup \u4f1a\u8ba9\u4f60\u624b\u52a8\u590d\u5236\u7c98\u8d34\u8fd0\u884c\u6700\u540e\u4e00\u53e5\u8f93\u51fa\uff0c\u4ee5\u542f\u7528\u91cd\u542f\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u52a8\u5316\neval $(pm2 startup | tail -n 1)\n')))))}y.isMDXComponent=!0}}]);