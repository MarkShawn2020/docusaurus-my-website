"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[80549],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},59308:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>m,default:()=>b,frontMatter:()=>d,metadata:()=>f,toc:()=>k});var r=n(35318),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&c(e,n,t[n]);if(l)for(var n of l(t))p.call(t,n)&&c(e,n,t[n]);return e};const d={},m="enhance: added ESLint ruler for CSS import",f={unversionedId:"coding/Software/Docusaurus/PR-ESLint-added-CSS-imports",id:"coding/Software/Docusaurus/PR-ESLint-added-CSS-imports",title:"enhance: added ESLint ruler for CSS import",description:"Pre-flight checklist",source:"@site/my-documents/docs/coding/Software/Docusaurus/PR-ESLint-added-CSS-imports.md",sourceDirName:"coding/Software/Docusaurus",slug:"/coding/Software/Docusaurus/PR-ESLint-added-CSS-imports",permalink:"/docs/coding/Software/Docusaurus/PR-ESLint-added-CSS-imports",draft:!1,editUrl:"https://github.com/markshawn2020/docusaurus/edit/master/my-documents/docs/coding/Software/Docusaurus/PR-ESLint-added-CSS-imports.md",tags:[],version:"current",lastUpdatedAt:1726564669,formattedLastUpdatedAt:"2024\u5e749\u670817\u65e5",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Mysql howto",permalink:"/docs/coding/Software/Database/Mysql/Mysql-howto"},next:{title:"feat(theme-common): added interface for locale char mapping",permalink:"/docs/coding/Software/Docusaurus/PR-added-interface-for-local-char-mapping"}},h={},k=[{value:"Pre-flight checklist",id:"pre-flight-checklist",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Other Solutions",id:"other-solutions",level:2},{value:"Test (tested both in WebStorm and VSCode)",id:"test-tested-both-in-webstorm-and-vscode",level:2},{value:"Essential",id:"essential",level:2},{value:"Other Problems",id:"other-problems",level:2},{value:"Related issues/PRs",id:"related-issuesprs",level:2}],g={toc:k};function b(e){var t,n=e,{components:a}=n,c=((e,t)=>{var n={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&p.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=u(u({},g),c),i(t,o({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("h1",u({},{id:"enhance-added-eslint-ruler-for-css-import"}),"enhance: added ESLint ruler for CSS import"),(0,r.kt)("h2",u({},{id:"pre-flight-checklist"}),"Pre-flight checklist"),(0,r.kt)("ul",u({},{className:"contains-task-list"}),(0,r.kt)("li",u({parentName:"ul"},{className:"task-list-item"}),(0,r.kt)("input",u({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","I have read the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://github.com/facebook/docusaurus/blob/main/CONTRIBUTING.md#pull-requests"}),"Contributing Guidelines on pull requests"),"."),(0,r.kt)("li",u({parentName:"ul"},{className:"task-list-item"}),(0,r.kt)("input",u({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ",(0,r.kt)("strong",{parentName:"li"},"If this is a code change"),": I have written unit tests and/or added dogfooding pages to fully verify the new behavior."),(0,r.kt)("li",u({parentName:"ul"},{className:"task-list-item"}),(0,r.kt)("input",u({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ",(0,r.kt)("strong",{parentName:"li"},"If this is a new API or substantial change"),": the PR has an accompanying issue (closes #0000) and the maintainers have approved on my working plan.")),(0,r.kt)("h2",u({},{id:"motivation"}),"Motivation"),(0,r.kt)("p",null,"In previous PR #7849, I found there is a bug when importing a ",(0,r.kt)("inlineCode",{parentName:"p"},"CSS")," file after importing a type from ",(0,r.kt)("inlineCode",{parentName:"p"},"@docusaurus/type"),"."),(0,r.kt)("p",null,"At first, we (with the maintainer) are guessing the problem is caused by my system environment. But later I did a lot of checks, and came to realize that it's not."),(0,r.kt)("p",null,"In fact, the solution is rather simple, i.e. forcing CSS imported at last, with just one extra line configuration in ",(0,r.kt)("inlineCode",{parentName:"p"},".eslintrc.js")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-js"}),"{\n  pattern: '*.css', // or '*.+(css|sass|less|scss|pcss|styl)' for general match\n  patternOptions: {matchBase: true},\n  group: 'unknown',\n  position: 'after',\n}\n")),(0,r.kt)("p",null,"You can get more info from the following references:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"official documentation of ",(0,r.kt)("inlineCode",{parentName:"li"},"eslint-plugin-import"),": ",(0,r.kt)("a",u({parentName:"li"},{href:"https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/order.md"}),"https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/order.md")),(0,r.kt)("li",{parentName:"ul"},"a discussion on how to import css at last (and I sorted out the best practice for our project from it): ",(0,r.kt)("a",u({parentName:"li"},{href:"https://github.com/import-js/eslint-plugin-import/issues/1239"}),"https://github.com/import-js/eslint-plugin-import/issues/1239"))),(0,r.kt)("h2",u({},{id:"other-solutions"}),"Other Solutions"),(0,r.kt)("p",null,"I'd think it unnecessary although it may works well using an extra plugin of ",(0,r.kt)("a",u({parentName:"p"},{href:"https://www.npmjs.com/package/eslint-plugin-css-import-order"}),(0,r.kt)("inlineCode",{parentName:"a"},"eslint-plugin-css-import-order")),"."),(0,r.kt)("h2",u({},{id:"test-tested-both-in-webstorm-and-vscode"}),"Test (tested both in WebStorm and VSCode)"),(0,r.kt)("p",null,"As mentioned from #7849, we can do a simple test."),(0,r.kt)("p",null,"TIPS:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"grep -irE \"import.*\\.css\" packages | cut -d ':' -f 1 | uniq")," can list all the files with css files imported."),(0,r.kt)("li",{parentName:"ul"},"the target type file is at ",(0,r.kt)("inlineCode",{parentName:"li"},"packages/docusaurus-types/src/index.d.ts"))),(0,r.kt)("p",null,"Take the ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/docusaurus-theme-common/src/components/Details/index.tsx")," as an example, we can easily get the warning if we import types from ",(0,r.kt)("inlineCode",{parentName:"p"},"@docusaurus/types")," before css file."),(0,r.kt)("p",null,(0,r.kt)("img",u({parentName:"p"},{src:"https://mark-vue-oss.oss-cn-hangzhou.aliyuncs.com/pr-eslint-1659195319887-8770459de59c7347cb5845f23368115d7be11115ef6c6aa5aaa99d726a26612c.png",alt:"picture 2"}))),(0,r.kt)("p",null,"However, if we omitted the imported default variable, then the warning would go away immediately (but would cause the later reference problems):"),(0,r.kt)("p",null,(0,r.kt)("img",u({parentName:"p"},{src:"https://mark-vue-oss.oss-cn-hangzhou.aliyuncs.com/pr-eslint-1659195545529-b436263301a97afed1c705136cdcfe6a14ffce1e3f1b224b09304eb973ee688a.png",alt:"picture 3"}))),(0,r.kt)("h2",u({},{id:"essential"}),"Essential"),(0,r.kt)("p",null,"The problem is indeed rather simple, i.e. the plugin of ",(0,r.kt)("inlineCode",{parentName:"p"},"eslint-plugin-import")," has no default type check for file extensions, so:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"grammar"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"group interpreated"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"import css from 'xx.css'")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"internal"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"import css from './xx.css'")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"sibling"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"import css from '../xx.css'")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"parent"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"import '../xx.css'")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"unknown"),"(maybe)")))),(0,r.kt)("p",null,"Hence, in normal situation, those ",(0,r.kt)("inlineCode",{parentName:"p"},"internal | sibling | parent")," would be ranked in front of ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", except we explictly declaring the module order, just like what the former work has been done:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-js"}),"...\n{pattern: '@theme/**', group: 'internal'},\n{pattern: '@site/**', group: 'internal'},\n{pattern: '@theme-init/**', group: 'internal'},\n{pattern: '@theme-original/**', group: 'internal'},\n...\n")),(0,r.kt)("p",null,"All those variables, as well as types, would be intepreted before any css-like imports."),(0,r.kt)("p",null,"But then, not so lucky for those types imported from ",(0,r.kt)("inlineCode",{parentName:"p"},"@docusaurus/types"),"."),(0,r.kt)("h2",u({},{id:"other-problems"}),"Other Problems"),(0,r.kt)("p",null,"Also, if we do not rectify this problem, each time when we commited, the eslint fix would force the local files changed into like this, which is not expected:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"import styles from './styles.module.css';\n\nimport type {Config} from '@docusaurus/types';\n")),(0,r.kt)("h2",u({},{id:"related-issuesprs"}),"Related issues/PRs"),(0,r.kt)("p",null,"#7849"))}b.isMDXComponent=!0}}]);