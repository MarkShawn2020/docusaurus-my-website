"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[98178],{35318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(27378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var c=2;c<l;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69938:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>u,metadata:()=>k,toc:()=>b});var a=n(35318),o=Object.defineProperty,l=Object.defineProperties,r=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&p(e,n,t[n]);if(i)for(var n of i(t))c.call(t,n)&&p(e,n,t[n]);return e};const u={image:".imgs/full-guide_cross-copy-over-ssh-vim-tmux-1662630169987-51fb98f3430a72c001eb7f3c151fb86fe315673a2334bb818da631aefdee2a58.png",tags:["ssh","vim","tmux","clipboard"],title:"ssh \u8de8\u7cfb\u7edf\u5171\u4eab vims \u526a\u5207\u677f\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848"},d=void 0,k={unversionedId:"coding/composite/full-guide_cross-copy-over-ssh-vim-tmux",id:"coding/composite/full-guide_cross-copy-over-ssh-vim-tmux",title:"ssh \u8de8\u7cfb\u7edf\u5171\u4eab vims \u526a\u5207\u677f\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848",description:"\u672c\u7bc7\u6587\u7ae0\u8be6\u7ec6\u5730\u8bb0\u5f55\u6574\u7406\u4e86\u5982\u4f55\u8de8\u7cfb\u7edf\u5171\u4eabVIM\u526a\u5207\u677f\u7684\u95ee\u9898\uff0c\u5177\u4f53\u5730\u8bf4\u6765\uff0c\u5c31\u662f\u5982\u4f55\u5728 ssh \u7684 vim \uff08in or not in tmux\uff09\u91cc\u5feb\u6377\u5730\u590d\u5236\u5230\u672c\u5730\u7cfb\u7edf\u526a\u5207\u677f\uff0c\u4e3b\u8981\u7528\u5230\u4e86 X11 \u5171\u4eab\u526a\u5207\u677f\u7684\u7279\u6027\uff0c\u4ee5\u53ca\u57fa\u4e8e socket \u5b9e\u73b0\u5730\u4f20\u8f93\u3002",source:"@site/my-documents/docs/coding/composite/full-guide_cross-copy-over-ssh-vim-tmux.md",sourceDirName:"coding/composite",slug:"/coding/composite/full-guide_cross-copy-over-ssh-vim-tmux",permalink:"/docs/coding/composite/full-guide_cross-copy-over-ssh-vim-tmux",draft:!1,editUrl:"https://github.com/markshawn2020/docusaurus/edit/master/my-documents/docs/coding/composite/full-guide_cross-copy-over-ssh-vim-tmux.md",tags:[{label:"ssh",permalink:"/docs/tags/ssh"},{label:"vim",permalink:"/docs/tags/vim"},{label:"tmux",permalink:"/docs/tags/tmux"},{label:"clipboard",permalink:"/docs/tags/clipboard"}],version:"current",lastUpdatedAt:1726564669,formattedLastUpdatedAt:"2024\u5e749\u670817\u65e5",frontMatter:{image:".imgs/full-guide_cross-copy-over-ssh-vim-tmux-1662630169987-51fb98f3430a72c001eb7f3c151fb86fe315673a2334bb818da631aefdee2a58.png",tags:["ssh","vim","tmux","clipboard"],title:"ssh \u8de8\u7cfb\u7edf\u5171\u4eab vims \u526a\u5207\u677f\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848"},sidebar:"defaultSidebar",previous:{title:"coding philosophy",permalink:"/docs/coding/coding-philosophy"},next:{title:"css",permalink:"/docs/coding/css"}},h={},b=[{value:"0. before you start",id:"0-before-you-start",level:2},{value:"1. ensure the installed vim supports <code>X11</code>",id:"1-ensure-the-installed-vim-supports-x11",level:2},{value:"2. enable <code>X11</code> on remote ubuntu via ssh",id:"2-enable-x11-on-remote-ubuntu-via-ssh",level:2},{value:"1. config",id:"1-config",level:3},{value:"2. connect on client",id:"2-connect-on-client",level:3},{value:"3. test on remote",id:"3-test-on-remote",level:3},{value:"3. enable access to clipboard on remote ubuntu at local (part 1: basic)",id:"3-enable-access-to-clipboard-on-remote-ubuntu-at-local-part-1-basic",level:2},{value:"1. enable listen on one shell",id:"1-enable-listen-on-one-shell",level:3},{value:"2. connect using reverse tunnelling",id:"2-connect-using-reverse-tunnelling",level:3},{value:"solution 1",id:"solution-1",level:4},{value:"solution 2",id:"solution-2",level:4},{value:"3. test on remote",id:"3-test-on-remote-1",level:3},{value:"4. enable access to clipboard on remote ubuntu at local (part 2: socket)",id:"4-enable-access-to-clipboard-on-remote-ubuntu-at-local-part-2-socket",level:2},{value:"1. config plist",id:"1-config-plist",level:3},{value:"2. chmod (necessary)",id:"2-chmod-necessary",level:3},{value:"3. start plist",id:"3-start-plist",level:3},{value:"4. test plist",id:"4-test-plist",level:3},{value:"TODO: 5. auto-start plist after login",id:"todo-5-auto-start-plist-after-login",level:3},{value:"5. enable vim copy to registry",id:"5-enable-vim-copy-to-registry",level:2},{value:"1. map <code>Y</code> to copy selected content into register <code>+</code>",id:"1-map-y-to-copy-selected-content-into-register-",level:3},{value:"2. usage",id:"2-usage",level:3},{value:"6. enable vim copy to local clipboard",id:"6-enable-vim-copy-to-local-clipboard",level:2},{value:"7. enable tmux copy to local clipboard",id:"7-enable-tmux-copy-to-local-clipboard",level:2},{value:"core reference",id:"core-reference",level:2}],f={toc:b};function g(e){var t,o=e,{components:p}=o,u=((e,t)=>{var n={};for(var a in e)s.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&i)for(var a of i(e))t.indexOf(a)<0&&c.call(e,a)&&(n[a]=e[a]);return n})(o,["components"]);return(0,a.kt)("wrapper",(t=m(m({},f),u),l(t,r({components:p,mdxType:"MDXLayout"}))),(0,a.kt)("p",null,"\u672c\u7bc7\u6587\u7ae0\u8be6\u7ec6\u5730\u8bb0\u5f55\u6574\u7406\u4e86\u5982\u4f55\u8de8\u7cfb\u7edf\u5171\u4eabVIM\u526a\u5207\u677f\u7684\u95ee\u9898\uff0c\u5177\u4f53\u5730\u8bf4\u6765\uff0c\u5c31\u662f\u5982\u4f55\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"ssh")," \u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"vim")," \uff08in or not in ",(0,a.kt)("inlineCode",{parentName:"p"},"tmux"),"\uff09\u91cc\u5feb\u6377\u5730\u590d\u5236\u5230\u672c\u5730\u7cfb\u7edf\u526a\u5207\u677f\uff0c\u4e3b\u8981\u7528\u5230\u4e86 ",(0,a.kt)("inlineCode",{parentName:"p"},"X11")," \u5171\u4eab\u526a\u5207\u677f\u7684\u7279\u6027\uff0c\u4ee5\u53ca\u57fa\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"socket")," \u5b9e\u73b0\u5730\u4f20\u8f93\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"picture 2",src:n(18685).Z,width:"1347",height:"910"}),"  "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#0-before-you-start"}),"0. before you start")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#1-ensure-the-installed-vim-supports-x11"}),"1. ensure the installed vim supports ",(0,a.kt)("inlineCode",{parentName:"a"},"X11"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#2-enable-x11-on-remote-ubuntu-via-ssh"}),"2. enable ",(0,a.kt)("inlineCode",{parentName:"a"},"X11")," on remote ubuntu via ssh"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#1-config"}),"1. config")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#2-connect-on-client"}),"2. connect on client")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#3-test-on-remote"}),"3. test on remote")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#3-enable-access-to-clipboard-on-remote-ubuntu-at-local-part-1-basic"}),"3. enable access to clipboard on remote ubuntu at local (part 1: basic)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#1-enable-listen-on-one-shell"}),"1. enable listen on one shell")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#2-connect-using-reverse-tunnelling"}),"2. connect using reverse tunnelling"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#solution-1"}),"solution 1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#solution-2"}),"solution 2")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#3-test-on-remote-1"}),"3. test on remote")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#4-enable-access-to-clipboard-on-remote-ubuntu-at-local-part-2-socket"}),"4. enable access to clipboard on remote ubuntu at local (part 2: socket)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#1-config-plist"}),"1. config plist")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#2-chmod-necessary"}),"2. chmod (necessary)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#3-start-plist"}),"3. start plist")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#4-test-plist"}),"4. test plist")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#todo-5-auto-start-plist-after-login"}),"TODO: 5. auto-start plist after login")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#5-enable-vim-copy-to-registry"}),"5. enable vim copy to registry"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#1-map-y-to-copy-selected-content-into-register-"}),"1. map ",(0,a.kt)("inlineCode",{parentName:"a"},"Y")," to copy selected content into register ",(0,a.kt)("inlineCode",{parentName:"a"},"+"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#2-usage"}),"2. usage")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#6-enable-vim-copy-to-local-clipboard"}),"6. enable vim copy to local clipboard")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#7-enable-tmux-copy-to-local-clipboard"}),"7. enable tmux copy to local clipboard")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"#core-reference"}),"core reference"))),(0,a.kt)("h2",m({},{id:"0-before-you-start"}),"0. before you start"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"premise your socket port for sharing clipboard is ",(0,a.kt)("inlineCode",{parentName:"li"},"19988")),(0,a.kt)("li",{parentName:"ul"},"premise your server connected to is ",(0,a.kt)("inlineCode",{parentName:"li"},"$YOUR_SERVER")),(0,a.kt)("li",{parentName:"ul"},"I just implemented from MacOS(local) to Ubuntu(remote), and the logic is no different on other platforms."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mark")," is my nickname")),(0,a.kt)("h2",m({},{id:"1-ensure-the-installed-vim-supports-x11"}),"1. ensure the installed vim supports ",(0,a.kt)("inlineCode",{parentName:"h2"},"X11")),(0,a.kt)("p",null,"ensure ",(0,a.kt)("inlineCode",{parentName:"p"},"+X11")," (instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"-X11"),") in ",(0,a.kt)("inlineCode",{parentName:"p"},"vim --version")),(0,a.kt)("p",null,"if not, install another version of ",(0,a.kt)("inlineCode",{parentName:"p"},"vim"),", otherwise the ",(0,a.kt)("inlineCode",{parentName:"p"},"* | +")," registries would not work (with a sound of beam for warning):"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"# ref: sudo apt install vim-gtk3\nsudo apt install vim-gtk3\n")),(0,a.kt)("h2",m({},{id:"2-enable-x11-on-remote-ubuntu-via-ssh"}),"2. enable ",(0,a.kt)("inlineCode",{parentName:"h2"},"X11")," on remote ubuntu via ssh"),(0,a.kt)("admonition",m({},{type:"caution"}),(0,a.kt)("p",{parentName:"admonition"},"to fix ",(0,a.kt)("inlineCode",{parentName:"p"},"Error: Can't open display: (null)")," when using ",(0,a.kt)("inlineCode",{parentName:"p"},'echo "xx" | xclip')," on remote ubuntu, I found we should config ",(0,a.kt)("inlineCode",{parentName:"p"},"ForwardX11 yes")," in both local and remote ssh config, see: ",(0,a.kt)("a",m({parentName:"p"},{href:"https://askubuntu.com/a/305681/1629991"}),"https://askubuntu.com/a/305681/1629991"))),(0,a.kt)("h3",m({},{id:"1-config"}),"1. config"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-conf"}),"## -- local ---\n# /etc/ssh/ssh_config\nHost *\n    ForwardX11 yes\n\n## -- remote ---\n# /etc/ssh/sshd_config\nX11Forwarding yes\n")),(0,a.kt)("h3",m({},{id:"2-connect-on-client"}),"2. connect on client"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"# the `-X` is to enable the `X11-forward` feature\nssh -X mark$YOUR_SERVER\n")),(0,a.kt)("h3",m({},{id:"3-test-on-remote"}),"3. test on remote"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"\u279c  ~ echo 'clip on air' | xclip\n\u279c  ~ xclip -o\nclip on air\n\u279c  ~ xclip -selection clipboard -o\nzzz2\n\u279c  ~ echo 'clip on clipboard' | xclip -selection clipboard\n\u279c  ~ xclip -o\nclip on air\n\u279c  ~ xclip -selection clipboard -o\nclip on clipboard\n\u279c  ~ xclip -sel clipboard -o\nclip on clipboard\n\u279c  ~ xclip -sel clip -o\nclip on clipboard\n")),(0,a.kt)("h2",m({},{id:"3-enable-access-to-clipboard-on-remote-ubuntu-at-local-part-1-basic"}),"3. enable access to clipboard on remote ubuntu at local (part 1: basic)"),(0,a.kt)("p",null,"\u9996\u5148\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u7bc7",(0,a.kt)("a",m({parentName:"p"},{href:"https://gist.github.com/dergachev/8259104"}),"Forward your clipboard via SSH reverse tunnels"),"\uff0c\u5b83\u7ed9\u51fa\u4e86\u6700\u7b80\u5355\u7684\u57fa\u4e8e\u65e0\u9650\u5faa\u73af\u76d1\u542c\u7aef\u53e3(",(0,a.kt)("inlineCode",{parentName:"p"},"nc -l"),")\u5e76\u590d\u5236(",(0,a.kt)("inlineCode",{parentName:"p"},"pbcopy"),")\u7684\u65b9\u6848\u3002"),(0,a.kt)("h3",m({},{id:"1-enable-listen-on-one-shell"}),"1. enable listen on one shell"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"while (true); do nc -l 19988 | pbcopy; done\n")),(0,a.kt)("h3",m({},{id:"2-connect-using-reverse-tunnelling"}),"2. connect using reverse tunnelling"),(0,a.kt)("h4",m({},{id:"solution-1"}),"solution 1"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"ssh mark@$YOUR_SERVER -R 19988:localhost:19988\n")),(0,a.kt)("h4",m({},{id:"solution-2"}),"solution 2"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"config on local")),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-conf"}),"# ~/.ssh/config\nRemoteForward 19988 localhost:19988\n")),(0,a.kt)("ol",m({},{start:2}),(0,a.kt)("li",{parentName:"ol"},"(possibly necessary) reload ssh")),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist\nsudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist\n")),(0,a.kt)("ol",m({},{start:3}),(0,a.kt)("li",{parentName:"ol"},"connect without ",(0,a.kt)("inlineCode",{parentName:"li"},"-R"))),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"ssh mark@$YOUR_SERVER\n")),(0,a.kt)("h3",m({},{id:"3-test-on-remote-1"}),"3. test on remote"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),'echo "test 1" | nc -q0 localhost 19988\n')),(0,a.kt)("p",null,"then we can access the ",(0,a.kt)("inlineCode",{parentName:"p"},"test 1")," in the local clipboard."),(0,a.kt)("h2",m({},{id:"4-enable-access-to-clipboard-on-remote-ubuntu-at-local-part-2-socket"}),"4. enable access to clipboard on remote ubuntu at local (part 2: socket)"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"see more at: ",(0,a.kt)("a",m({parentName:"p"},{href:"https://medium.com/hackernoon/tmux-in-practice-copy-text-from-remote-session-using-ssh-remote-tunnel-and-systemd-service-dd3c51bca1fa"}),"tmux in practice: copy text from remote session using SSH remote tunnel and systemd service | by Alexey Samoshkin | HackerNoon.com | Medium"))),(0,a.kt)("h3",m({},{id:"1-config-plist"}),"1. config plist"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"PLIST_PBCOPY_SSH=`~/.pbcopy_ssh.plist`\n")),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n    <key>Label</key>\n    <string>pbcopy-ssh</string>\n\n    <key>UserName</key>\n    <string>mark</string>\n\n    <key>Program</key>\n    <string>/usr/bin/pbcopy</string>\n\n    <key>Sockets</key>\n    <dict>\n        <key>Listeners</key>\n        <dict>\n            <key>SockNodeName</key>\n            <string>localhost</string>\n            <key>SockServiceName</key>\n            <string>19988</string>\n        </dict>\n    </dict>\n    <key>inetdCompatibility</key>\n    <dict>\n        <key>Wait</key>\n        <false/>\n    </dict>\n</dict>\n</plist>\n')),(0,a.kt)("h3",m({},{id:"2-chmod-necessary"}),"2. chmod (necessary)"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"chmod 755 $PLIST_PBCOPY_SSH\n")),(0,a.kt)("p",null,"see ",(0,a.kt)("a",m({parentName:"p"},{href:"https://developer.apple.com/forums/thread/665661?answerId=695171022#695171022"}),"https://developer.apple.com/forums/thread/665661?answerId=695171022#695171022"),", otherwise would have the following error if we ",(0,a.kt)("inlineCode",{parentName:"p"},"load")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"unload")," the plist file:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-text"}),"Load failed: 5: Input/output error\nTry running `launchctl bootstrap` as root for richer errors.\n")),(0,a.kt)("h3",m({},{id:"3-start-plist"}),"3. start plist"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"launchctl load $PLIST_PBCOPY_SSH\nlaunchctl start pbcopy-ssh\n")),(0,a.kt)("p",null,"we can also check the running state of plist via ",(0,a.kt)("inlineCode",{parentName:"p"},"launchctl print gui/501/pbcopy-ssh | grep state")," to only get ",(0,a.kt)("inlineCode",{parentName:"p"},"state = not running"),", but it have worked actually."),(0,a.kt)("h3",m({},{id:"4-test-plist"}),"4. test plist"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-sh"}),"ssh mark@$YOUR_SERVER -R 19988:localhost:19988\n\necho 'test 2' | nc -q0 localhost 19988\n")),(0,a.kt)("p",null,"then we can access the ",(0,a.kt)("inlineCode",{parentName:"p"},"test 2")," in the local clipboard."),(0,a.kt)("h3",m({},{id:"todo-5-auto-start-plist-after-login"}),"TODO: 5. auto-start plist after login"),(0,a.kt)("h2",m({},{id:"5-enable-vim-copy-to-registry"}),"5. enable vim copy to registry"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"see more at: ",(0,a.kt)("a",m({parentName:"p"},{href:"https://stackoverflow.com/questions/3961859/how-to-copy-to-clipboard-in-vim#:~:text=In%20vim%20command%20mode%20press,and%20CMD%20%2B%20v%20to%20paste."}),"How to copy to clipboard in Vim? - Stack Overflow"))),(0,a.kt)("h3",m({},{id:"1-map-y-to-copy-selected-content-into-register-"}),"1. map ",(0,a.kt)("inlineCode",{parentName:"h3"},"Y")," to copy selected content into register ",(0,a.kt)("inlineCode",{parentName:"h3"},"+")),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-.vimrc"}),'vnoremap Y "+y\n')),(0,a.kt)("h3",m({},{id:"2-usage"}),"2. usage"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"shift + V")," to switch to ",(0,a.kt)("inlineCode",{parentName:"li"},"Visual Mode")," and select the current line, then use the Arrow key of ",(0,a.kt)("inlineCode",{parentName:"li"},"UP | DOWN")," to select more lines."),(0,a.kt)("li",{parentName:"ol"},"press ",(0,a.kt)("inlineCode",{parentName:"li"},"Y")," to copy the selected lines into the clipboard")),(0,a.kt)("h2",m({},{id:"6-enable-vim-copy-to-local-clipboard"}),"6. enable vim copy to local clipboard"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"see more at: ","[ssh - How to use X11 forwarding to copy from vim to local machine - Stack Overflow]","(",(0,a.kt)("a",m({parentName:"p"},{href:"https://stackoverflow.com/questions/47822357/how-to-use-x11-forwarding-to-copy-fro"}),"https://stackoverflow.com/questions/47822357/how-to-use-x11-forwarding-to-copy-fro")," m-vim-to-local-machine)")),(0,a.kt)("p",null,"Based on section of ",(0,a.kt)("a",m({parentName:"p"},{href:"#4-enable-vim-copy-to-registry"}),"4. enable vim copy to registry"),", we can manually run a system command that send the registered content into system clipboard (local via ",(0,a.kt)("inlineCode",{parentName:"p"},"xclip or pbcopy")," or remote via ",(0,a.kt)("inlineCode",{parentName:"p"},"nc and xclip or pbcopy"),")."),(0,a.kt)("p",null,"For example, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},": call system('nc -q0 localhost 19988', @+)")," to send the content in register ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," to the local port at 19988."),(0,a.kt)("admonition",m({},{type:"caution"}),(0,a.kt)("p",{parentName:"admonition"},"we should add ",(0,a.kt)("inlineCode",{parentName:"p"},"-q0")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"nc")," if necessary, otherwise I found that the command just won't stop input (since it would has verbose output).")),(0,a.kt)("p",null,"So, for convenience, we can directly use the following vim script to map the sequences into one key of ",(0,a.kt)("inlineCode",{parentName:"p"},"Y"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-.vimrc"}),'" -- enable Y to copy to clipboard, ref: https://stackoverflow.com/a/67890119/9422455\n" how to map two commands with only one key, ref: https://vi.stackexchange.com/a/3886\n" what\'s the meaning of <CR> (which can be omitted in bottom command), ref: https://stackoverflow.com/a/22143208/9422455\n\nvnoremap Y "+y :call system(\'nc -q0 localhost 19988\', @+)<CR>\n')),(0,a.kt)("h2",m({},{id:"7-enable-tmux-copy-to-local-clipboard"}),"7. enable tmux copy to local clipboard"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"see more at: ",(0,a.kt)("a",m({parentName:"p"},{href:"https://www.cnblogs.com/gmpy/p/11177719.html"}),"vim\u4e0e\u7cfb\u7edf\u526a\u5207\u677f\u4e4b\u95f4\u7684\u590d\u5236\u7c98\u8d34 - \u5e7f\u6f20\u98d8\u7fbd - \u535a\u5ba2\u56ed"))),(0,a.kt)("p",null,"after vim configured, the tmux copy paste would runs well if we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"oh-my-tmux")," config at ",(0,a.kt)("inlineCode",{parentName:"p"},"https://github.com/gpakosz/.tmux")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"picture 1",src:n(91335).Z,width:"2424",height:"1360"}),"  "),(0,a.kt)("h2",m({},{id:"core-reference"}),"core reference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"https://gist.github.com/dergachev/8259104"}),"Forward your clipboard via SSH reverse tunnels")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"https://www.cnblogs.com/gmpy/p/11177719.html#1492777136"}),"vim\u4e0e\u7cfb\u7edf\u526a\u5207\u677f\u4e4b\u95f4\u7684\u590d\u5236\u7c98\u8d34 - \u5e7f\u6f20\u98d8\u7fbd - \u535a\u5ba2\u56ed")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"https://medium.com/free-code-camp/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b"}),"tmux in practice: integration with the system clipboard | by Alexey Samoshkin | We\u2019ve moved to freeCodeCamp.org/news | Medium")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"https://medium.com/hackernoon/tmux-in-practice-copy-text-from-remote-session-using-ssh-remote-tunnel-and-systemd-service-dd3c51bca1fa"}),"tmux in practice: copy text from remote session using SSH remote tunnel and systemd service | by Alexey Samoshkin | HackerNoon.com | Medium")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"https://github.com/gpakosz/.tmux"}),"gpakosz/.tmux: \ud83c\uddeb\ud83c\uddf7 Oh my tmux! My self-contained, pretty & versatile tmux configuration made with \u2764\ufe0f"))))}g.isMDXComponent=!0},18685:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/full-guide_cross-copy-over-ssh-vim-tmux-1662630169987-51fb98f3430a72c001eb7f3c151fb86fe315673a2334bb818da631aefdee2a58-98edbe16fd07aaca5f306265594a71b3.png"},91335:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/index-1662628851309-1d53983832c95df31fae1955313276fbc7171937bd0dcc854ebdf760c063c429-069f9aa2899f8c6f1b8f0a333bc8ac96.png"}}]);